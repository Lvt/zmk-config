#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2

// Media controls

#define VOL_DOWN C_VOLUME_DOWN
#define VOL_UP C_VOLUME_UP
#define VOL_MUTE K_MUTE
#define PREV C_PREVIOUS
#define PLAY C_PLAY_PAUSE
#define NEXT C_NEXT

// Display controls

#define BRIGHT C_BRIGHTNESS_INC
#define DARK C_BRIGHTNESS_DEC

// Window controls

#define APPS C_AC_DESKTOP_SHOW_ALL_WINDOWS
#define SEARCH C_AC_SEARCH

/ {
    behaviors {
        /*
         * htl
         *
         * - tab once to switch layer
         * - hold to enable layer until release
         */

        htl: hold_tab_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAB_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&mo>, <&to>;
        };

        /*
         * hm
         * 
         * - tab once for key press 2nd item
         * - hold for key press 1st item
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // different key press on each press (LSHFT -> CAPS Lock)
        // https://zmk.dev/docs/behaviors/tap-dance
        /*
         * td_caps
         *
         * - tab once for 2nd item
         * - tab twice for 1st item
         */

        td_qm: td_qm {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QM";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&input_qm>;
        };

        td_lvt: td_lvt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LVT";
            #binding-cells = <0>;
            bindings = <&kp L>, <&input_lvt>;
        };

        td_vt: td_vt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_VT";
            #binding-cells = <0>;
            bindings = <&kp V>, <&input_vt>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_brace_left {
            timeout-ms = <30>;
            key-positions = <15 16>;
            bindings = <&kp LEFT_BRACE>;
        };

        combo_bracket_left {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&kp LBKT>;
        };

        combo_bracket_right {
            timeout-ms = <30>;
            key-positions = <18 19>;
            bindings = <&kp RBKT>;
        };

        combo_brace_right {
            timeout-ms = <30>;
            key-positions = <19 20>;
            bindings = <&kp RIGHT_BRACE>;
        };

        combo_pipe {
            timeout-ms = <30>;
            key-positions = <27 28>;
            bindings = <&kp PIPE>;
        };

        combo_parenthesis_left {
            timeout-ms = <30>;
            key-positions = <28 29>;
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        combo_parenthesis_right {
            timeout-ms = <30>;
            key-positions = <30 31>;
            bindings = <&kp RIGHT_PARENTHESIS>;
        };

        combo_umlaut_A {
            bindings = <&umlaut_big_A>;
            key-positions = <24 13>;
            layers = <1 2>;
        };

        combo_umlaut_big_U {
            bindings = <&umlaut_big_U>;
            key-positions = <24 7>;
            layers = <1 2>;
        };

        combo_umlaut_big_O {
            bindings = <&umlaut_big_O>;
            key-positions = <24 9>;
            layers = <1 2>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp A>;
            label = "UMLAUT_A";
        };

        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp U>;
            label = "UMLAUT_U";
        };

        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp O>;
            label = "UMLAUT_O";
        };

        umlaut_big_A: umlaut_big_A {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(A)>;
            label = "UMLAUT_BIG_A";
        };

        umlaut_big_U: umlaut_big_U {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(U)>;
            label = "UMLAUT_BIG_U";
        };

        umlaut_big_O: umlaut_big_O {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(O)>;
            label = "UMLAUT_BIG_O";
        };

        input_qm: input_qm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Q) &kp U &kp A &kp R &kp T &kp E &kp T &kp T &kp SPACE &kp M &kp O &kp B &kp I &kp L &kp E>;
            label = "INPUT_QM";
        };

        input_vt: input_vt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp O &kp N &kp SPACE &kp LS(T) &kp I &kp P &kp P &kp E &kp L &kp S &kp K &kp I &kp R &kp C &kp H>;
            label = "INPUT_VT";
        };

        input_lvt: input_lvt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(L) &kp E &kp O &kp N &kp SPACE &kp V &kp O &kp N &kp SPACE &kp LS(T) &kp I &kp P &kp P &kp E &kp L &kp S &kp K &kp I &kp R &kp C &kp H>;
            label = "INPUT_LVT";
        };
    };

    // cheat-sheet https://peccu.github.io/zmk-cheat-sheet/

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&hm N0 ESC  &td_qm  &hm N2 W  &hm N3 E            &hm N4 R  &hm N5 T     &hm N6 Y   &hm N7 U           &hm N8 I            &hm N9 O  &hm N0 P                 &hm LA(BSPC) BSPC
&kp TAB     &kp A   &kp S     &kp D               &kp F     &kp G        &kp H      &kp J              &kp K               &td_lvt   &hm BACKSLASH SEMICOLON  &kp ENTER
&kp LSHFT   &kp Z   &kp X     &kp C               &td_vt    &kp B        &kp N      &kp M              &kp COMMA           &kp DOT   &hm BSLH FSLH            &kp RIGHT_SHIFT
                              &htl LOWER DEFAULT  &kp LCMD  &kp SPACE    &kp ENTER  &hm LA(BSPC) BSPC  &htl RAISE DEFAULT
            >;
        };

        lower_layer {
            bindings = <
&kp ESC         &none          &none         &kp LC(LA(E))       &kp LG(TAB)    &kp LA(LC(T))    &none              &umlaut_u     &hm F9 VOL_MUTE     &umlaut_o     &kp K_VOLUME_DOWN  &kp C_VOLUME_UP
&umlaut_a       &hm LALT EXCL  &hm LCTRL AT  &kp LA(LC(D))       &kp LA(LC(F))  &kp LA(LC(G))    &kp NUMBER_6       &kp N7        &kp N8              &kp N9        &kp N0             &none
&kp LEFT_SHIFT  &none          &none         &none               &none          &none            &kp NUMBER_0       &kp NUMBER_1  &kp N2              &kp NUMBER_3  &kp NUMBER_4       &kp N5
                                             &htl LOWER DEFAULT  &kp LCMD       &kp SPACE        &kp RIGHT_CONTROL  &kp DEL       &htl RAISE DEFAULT
            >;
        };

        raise_layer {
            bindings = <
&kp ESC     &kp F1        &kp F2        &kp F3              &kp F4        &kp F5          &kp F6             &umlaut_u   &hm F8 UP         &umlaut_o  &kp F10  &kp F11
&none       &umlaut_a     &none         &none               &none         &none           &none              &kp LEFT    &kp DOWN          &kp RIGHT  &none    &kp LG(LS(NUMBER_4))
&kp LSHIFT  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2        &bt BT_SEL 3  &bt BT_SEL 4    &none              &bt BT_CLR  &none             &none      &none    &none
                                        &htl LOWER DEFAULT  &kp LCMD      &kp SPACE       &kp RIGHT_CONTROL  &kp DEL     &htl RAISE LOWER
            >;
        };

        tri_layer {
            bindings = <
&kp ESC  &none  &none       &none               &none       &none        &none              &kp N7   &kp N8            &kp N9  &none  &none
&none    &none  &kp C_PREV  &kp C_PP            &kp C_NEXT  &none        &none              &kp N4   &kp N5            &kp N6  &none  &none
&none    &none  &none       &none               &none       &none        &kp N0             &kp N1   &kp N2            &kp N3  &none  &none
                            &htl LOWER DEFAULT  &kp LCMD    &kp SPACE    &kp RIGHT_CONTROL  &kp DEL  &htl RAISE LOWER
            >;
        };
    };
};
